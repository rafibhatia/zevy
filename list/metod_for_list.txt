Methods Used in Your Program:

    append():
        What it does: Adds an item to the end of a list.
        Example:

    words.append("apple")

    This would add the word "apple" to the words list.

remove():

    What it does: Removes the first occurrence of a specified item from a list.
    Example:

    words.remove("apple")

    This would remove the word "apple" from the list words. If the word is not found, it raises a ValueError.

del:

    What it does: Deletes an item from a list based on its position or removes the entire list.
    Example:

    del words[2]

    This deletes the item at index 2 (third item) in the words list.

enumerate():

    What it does: Provides both the index and value of each item in an iterable (like a list).
    Example:

    for index, word in enumerate(words):
        print(f"{index+1}: {word}")

    This will print the index (starting from 1) and each word in the list words.

type():

    What it does: Returns the type of a given object, such as whether it's a list, tuple, integer, string, etc.
    Example:

    print(type(words))

    This would print the type of words, which might be <class 'list'> or <class 'tuple'>.

isinstance():

    What it does: Checks if an object is an instance of a particular class or type.
    Example:

        if isinstance(words, list):
            print("This is a list.")

        This checks if words is a list. If it is, it prints "This is a list."

Concepts:
ID in Python:

    What it is: Every object in Python has a unique identifier called the "ID", which you can think of as a memory address where the object is stored.

    How to get it: You can use the id() function to get the ID of an object.

print(id(words))

This will print the memory address of the words list.

Why it's important: The ID helps differentiate whether two variables point to the same object or different objects, even if the objects themselves are identical.

Same ID: If two variables point to the same object, their id() values will be the same.

list1 = [1, 2, 3]
list2 = list1
print(id(list1) == id(list2))  # Output: True

Different ID: If two variables point to different objects, even if they have the same content, their id() values will be different.

    list1 = [1, 2, 3]
    list2 = [1, 2, 3]
    print(id(list1) == id(list2))  # Output: False

Difference Between Lists and Tuples:

    Lists:
        Mutable: Lists can be changed after they are created (you can add, remove, or modify elements).
        Example:

    words = ["apple", "banana"]
    words.append("cherry")  # This is allowed in a list
    print(words)  # ['apple', 'banana', 'cherry']

Tuples:

    Immutable: Tuples cannot be changed after they are created. You cannot add, remove, or modify elements in a tuple.
    Example:

    fruits = ("apple", "banana")
    # fruits.append("cherry")  # This would raise an error because tuples are immutable
    print(fruits)  # ('apple', 'banana')

Key differences:

    Mutability: Lists can be changed (mutable), while tuples cannot be changed (immutable).

    Performance: Tuples are generally faster than lists due to their immutability.

    Use case: Use lists when you need a collection of items that might change over time (add, remove, modify). Use tuples when you want an ordered collection that should not be modified.

    To create a tuple:

fruits = ("apple", "banana", "cherry")

    Access elements in a tuple:

    print(fruits[1])  # Output: 'banana'

To create a list:

        fruits = ["apple", "banana", "cherry"]

In summary, lists are mutable, so you can change their content, while tuples are immutable, which makes them useful for fixed collections of items. The id() function helps you understand if two variables are referencing the same object, which is essential for understanding how objects are managed in memory in Python.

